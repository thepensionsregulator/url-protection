trigger:
  batch: true
  branches:
    include:
      - develop

resources:
  repositories:
    - repository: tpr_pipeline_snippets
      type: git
      name: TPR/Pipeline-Snippets
      ref: refs/heads/release/1.0.0
    - repository: pipelines
      type: git
      name: TPR/Tools-AzurePipelines
      ref: develop
    - repository: hooks
      type: git
      name: TPR/Tools-TPRGitHooks
      ref: develop

pool:
  vmImage: windows-2022

steps:
  - checkout: self

  - checkout: hooks

  - checkout: pipelines

  - template: ./file_system_debug.steps.yml@tpr_pipeline_snippets

  - template: git-secrets.steps.yml@hooks

  - task: DotNetCoreCLI@2
    inputs:
      command: restore
      projects: $(Build.SourcesDirectory)\url-protection\TPR.UrlProtection.sln
    displayName: dotnet restore

  - template: security/check-nuget-packages.steps.yml@pipelines
    parameters:
      path: $(Build.SourcesDirectory)\url-protection\TPR.UrlProtection.sln

  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: |
        $(Build.SourcesDirectory)\url-protection\TPR.UrlProtection.Tests\TPR.UrlProtection.Tests.csproj
      arguments: --configuration Release --collect:"XPlat Code Coverage"
    displayName: dotnet test
    continueOnError: false # Test failures should fail the build

  # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # First install the tool on the machine, then run it
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Agent.TempDirectory)\**\coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
    displayName: Create code coverage report

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@1
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml"
      reportDirectory: "$(Build.SourcesDirectory)/CodeCoverage"

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: -o $(Build.ArtifactStagingDirectory) --configuration Release --verbosity normal
      projects: $(Build.SourcesDirectory)\url-protection\TPR.UrlProtection\TPR.UrlProtection.csproj
      publishWebProjects: false
      zipAfterPublish: false
    displayName: dotnet publish

  - template: ./file_system_debug.steps.yml@tpr_pipeline_snippets

  - publish: $(Build.ArtifactStagingDirectory)
    displayName: Publish artifact
